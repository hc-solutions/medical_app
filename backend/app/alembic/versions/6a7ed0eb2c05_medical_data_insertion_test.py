"""medical data insertion test

Revision ID: 6a7ed0eb2c05
Revises: d4867f3a4c0a
Create Date: 2021-11-22 15:48:37.286203

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "6a7ed0eb2c05"
down_revision = "d4867f3a4c0a"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "department_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "diseases",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("source", sa.Integer(), nullable=False),
        sa.Column("is_actual", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
    )
    op.create_table(
        "hospitals",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "medical_items",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("medical_name", sa.String(), nullable=True),
        sa.Column("unit", sa.String(), nullable=False),
        sa.Column("capacity", sa.Float(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "office_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "patients",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("middle_name", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("birth_date", sa.DATE(), nullable=False),
        sa.Column("medical_insurance", sa.String(), nullable=False),
        sa.Column("pension_insurance", sa.String(), nullable=True),
        sa.Column("address", sa.String(), nullable=True),
        sa.Column("passport", sa.String(), nullable=True),
        sa.Column("phone", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "first_name", "middle_name", "last_name", "birth_date", "medical_insurance"
        ),
    )
    op.create_table(
        "procedures",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "specializations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_specializations_id"), "specializations", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_specializations_title"), "specializations", ["title"], unique=True
    )
    op.create_table(
        "ward_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "warehouse_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("purpose", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "hospital_departments",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("hospital_id", sa.Integer(), nullable=True),
        sa.Column("department_type", sa.Integer(), nullable=True),
        sa.Column("title", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["department_type"],
            ["department_types.id"],
        ),
        sa.ForeignKeyConstraint(
            ["hospital_id"],
            ["hospitals.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "medical_compositions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("composite_item_id", sa.Integer(), nullable=True),
        sa.Column("consists_from", sa.Integer(), nullable=True),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["composite_item_id"],
            ["medical_items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["consists_from"],
            ["medical_items.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "department_offices",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("office_type", sa.Integer(), nullable=True),
        sa.Column("department_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["hospital_departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["office_type"],
            ["office_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "department_wards",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("ward_type", sa.Integer(), nullable=True),
        sa.Column("department_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["hospital_departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["ward_type"],
            ["ward_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "staff",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("specialization_id", sa.Integer(), nullable=True),
        sa.Column("department_id", sa.Integer(), nullable=True),
        sa.Column("is_chief", sa.Boolean(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("middle_name", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("phone", sa.String(), nullable=True),
        sa.Column("address", sa.String(), nullable=True),
        sa.Column("personal_phone", sa.String(), nullable=True),
        sa.Column("tax_number", sa.String(), nullable=True),
        sa.Column("birth_date", sa.DATE(), nullable=True),
        sa.Column("medical_insurance", sa.String(), nullable=True),
        sa.Column("pension_insurance", sa.String(), nullable=True),
        sa.Column("passport_series", sa.String(), nullable=True),
        sa.Column("passport_number", sa.String(), nullable=True),
        sa.Column("current_salary", sa.Float(), nullable=True),
        sa.Column("employed_at", sa.DATE(), nullable=True),
        sa.Column("dismissed_at", sa.DATE(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["hospital_departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["specialization_id"],
            ["specializations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "warehouses",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("warehouse_type", sa.Integer(), nullable=False),
        sa.Column("hospital_id", sa.Integer(), nullable=False),
        sa.Column("department_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["hospital_departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["hospital_id"],
            ["hospitals.id"],
        ),
        sa.ForeignKeyConstraint(
            ["warehouse_type"],
            ["warehouse_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "medical_records",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("staff_id", sa.Integer(), nullable=False),
        sa.Column("patient_id", sa.Integer(), nullable=False),
        sa.Column("patient_claims", sa.Text(), nullable=True),
        sa.Column("specialists_notes", sa.Text(), nullable=False),
        sa.Column("patient_instructions", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("staff_secret", sa.String(), nullable=False),
        sa.Column("hash_sum", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["patient_id"],
            ["patients.id"],
        ),
        sa.ForeignKeyConstraint(
            ["staff_id"],
            ["staff.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "office_staff",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("office_id", sa.Integer(), nullable=True),
        sa.Column("staff_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["office_id"],
            ["staff.id"],
        ),
        sa.ForeignKeyConstraint(
            ["staff_id"],
            ["department_offices.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ward_places",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("ward_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["ward_id"],
            ["department_wards.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "warehouse_items",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("warehouse_id", sa.Integer(), nullable=True),
        sa.Column("item_id", sa.Integer(), nullable=True),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["medical_items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["warehouse_id"],
            ["warehouses.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "diagnoses",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("disease_id", sa.Integer(), nullable=True),
        sa.Column("record_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["disease_id"],
            ["diseases.id"],
        ),
        sa.ForeignKeyConstraint(
            ["record_id"],
            ["medical_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "patient_appointments",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("record_id", sa.Integer(), nullable=True),
        sa.Column("appointment_with", sa.Integer(), nullable=True),
        sa.Column("scheduled_at", sa.DateTime(), nullable=False),
        sa.Column("valid_until", sa.DateTime(), nullable=False),
        sa.Column("took_place", sa.Boolean(), nullable=False),
        sa.Column("started_at", sa.DateTime(), nullable=False),
        sa.Column("ended_at", sa.DateTime(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["appointment_with"],
            ["staff.id"],
        ),
        sa.ForeignKeyConstraint(
            ["record_id"],
            ["medical_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "patient_prescriptions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("record_id", sa.Integer(), nullable=True),
        sa.Column("medicine_id", sa.Integer(), nullable=True),
        sa.Column("medication_schedule", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["medicine_id"],
            ["medical_items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["record_id"],
            ["medical_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "procedures_records",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("record_id", sa.Integer(), nullable=True),
        sa.Column("procedure_id", sa.Integer(), nullable=True),
        sa.Column("files", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["procedure_id"],
            ["procedures.id"],
        ),
        sa.ForeignKeyConstraint(
            ["record_id"],
            ["medical_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "warehouses_transitions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("current_warehouse", sa.Integer(), nullable=True),
        sa.Column("target_warehouse", sa.Integer(), nullable=True),
        sa.Column("item", sa.Integer(), nullable=True),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("staff", sa.Integer(), nullable=True),
        sa.Column("target_staff", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["current_warehouse"],
            ["warehouses.id"],
        ),
        sa.ForeignKeyConstraint(
            ["item"],
            ["warehouse_items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["staff"],
            ["staff.id"],
        ),
        sa.ForeignKeyConstraint(
            ["target_staff"],
            ["staff.id"],
        ),
        sa.ForeignKeyConstraint(
            ["target_warehouse"],
            ["warehouses.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.alter_column("user", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "user", "hashed_password", existing_type=sa.VARCHAR(), nullable=False
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "user", "hashed_password", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column("user", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_table("warehouses_transitions")
    op.drop_table("procedures_records")
    op.drop_table("patient_prescriptions")
    op.drop_table("patient_appointments")
    op.drop_table("diagnoses")
    op.drop_table("warehouse_items")
    op.drop_table("ward_places")
    op.drop_table("office_staff")
    op.drop_table("medical_records")
    op.drop_table("warehouses")
    op.drop_table("staff")
    op.drop_table("department_wards")
    op.drop_table("department_offices")
    op.drop_table("medical_compositions")
    op.drop_table("hospital_departments")
    op.drop_table("warehouse_types")
    op.drop_table("ward_types")
    op.drop_index(op.f("ix_specializations_title"), table_name="specializations")
    op.drop_index(op.f("ix_specializations_id"), table_name="specializations")
    op.drop_table("specializations")
    op.drop_table("procedures")
    op.drop_table("patients")
    op.drop_table("office_types")
    op.drop_table("medical_items")
    op.drop_table("hospitals")
    op.drop_table("diseases")
    op.drop_table("department_types")
    # ### end Alembic commands ###
