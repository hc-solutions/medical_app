version: "2.7"

networks:
  default:

services:
  medical_db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    expose:
      - "5432"

  backend:
    depends_on:
      - medical_db
    links:
      - medical_db
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    expose:
      - "8000"
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_SERVER=$POSTGRES_SERVER
      - POSTGRES_DB=$POSTGRES_DB
      - FIRST_APP_SUPERUSER=$FIRST_APP_SUPERUSER
      - FIRST_APP_SUPERUSER_PASSWORD=$FIRST_APP_SUPERUSER_PASSWORD
      - HOSTNAME=$HOSTNAME
      - SCOPE=dev
    labels:
      traefik.enable: true
      traefik.http.routers.backend.entrypoints: web
      traefik.http.routers.backend.rule: Host(`api.$HOSTNAME`)

  search:
    image: getmeili/meilisearch:v0.23.1
    restart: always
    volumes:
      - meilidate:/data.ms
    environment:
      MEILI_MASTER_KEY: "$MEILI_MASTER_KEY"
      MEILI_NO_ANALYTICS: "true"
      MEILI_LOG_LEVEL: "$MEILI_LOG_LEVEL"
    expose:
      - "7700"
    labels:
      traefik.enable: true
      traefik.http.routers.search.entrypoints: web
      traefik.http.routers.search.rule: Host(`ms.$HOSTNAME`)

  traefik:
    image: traefik:v2.6
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    command:
      # api
      - --api.insecure=true
      - --api.dashboard=true
      - --api.debug=true
      # general logs
      - --log.level=DEBUG
      # set providers
      - --providers.docker=true                   # docker is a provider
      # - --providers.docker.network=medical        # only look at containers this network
      - --providers.docker.exposedbydefault=false # each container needs to be explicitly enabled to be seen by traefik (- "traefik.enable=true")
      # set entrypoints
      - --entrypoints.web.address=:80
    labels:
      traefik.enable: true # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      traefik.http.routers.traefik.rule: Host(`traefik.$HOSTNAME`)
      traefik.http.services.traefik.loadbalancer.server.port: 8080

    ports:
      - "80:80"

  frontend_app:
    build:
      context: frontend_app/
      dockerfile: Dockerfile.local
    volumes:
      - ./frontend_app:/app
    expose:
      - "8080"  # "80" for production
    labels:
      traefik.enable: true
      traefik.http.routers.frontend_app.entrypoints: web
      traefik.http.routers.frontend_app.rule: Host(`app.$HOSTNAME`)

  landing:
    build:
      context: landing/
      dockerfile: Dockerfile.local
    volumes:
      - ./landing:/app
    expose:
      - "8080" # 80 for production
    labels:
      traefik.enable: true
      traefik.http.routers.landing.entrypoints: web
      traefik.http.routers.landing.rule: Host(`$HOSTNAME`)

volumes:
  app-db-data:
  meilidate:
